// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Node interface {
	IsNode()
}

type Attendee struct {
	ID         string     `json:"id"`
	User       *User      `json:"user"`
	Event      *Event     `json:"event"`
	Commitment Commitment `json:"Commitment"`
	Comment    *string    `json:"Comment"`
}

func (Attendee) IsNode() {}

type Comment struct {
	ID      string `json:"id"`
	Text    string `json:"text"`
	Creator *User  `json:"creator"`
	Event   *Event `json:"event"`
}

func (Comment) IsNode() {}

type Event struct {
	ID          string      `json:"id"`
	Name        string      `json:"name"`
	Description *string     `json:"description"`
	Adress      *string     `json:"adress"`
	Start       string      `json:"start"`
	End         *string     `json:"end"`
	Creator     *User       `json:"creator"`
	Comments    []*Comment  `json:"comments"`
	Attendees   []*Attendee `json:"attendees"`
}

func (Event) IsNode() {}

type Invite struct {
	ID      string   `json:"id"`
	User    *User    `json:"user"`
	Section *Section `json:"section"`
}

func (Invite) IsNode() {}

type Login struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type Member struct {
	ID      string   `json:"id"`
	User    *User    `json:"user"`
	Section *Section `json:"section"`
	Right   int      `json:"right"`
}

func (Member) IsNode() {}

type NewEvent struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
	Adress      *string `json:"adress"`
	Start       string  `json:"start"`
	End         *string `json:"end"`
}

type NewInvite struct {
	User    string `json:"user"`
	Section string `json:"section"`
}

type NewOrganization struct {
	Name    string  `json:"name"`
	Picture *string `json:"picture"`
}

type NewSection struct {
	Name         string `json:"name"`
	Organization string `json:"organization"`
}

type NewUser struct {
	Username string  `json:"username"`
	Password string  `json:"password"`
	Email    string  `json:"email"`
	Showname *string `json:"showname"`
}

type Organization struct {
	ID       string     `json:"id"`
	Name     string     `json:"name"`
	Sections []*Section `json:"sections"`
	Picture  *string    `json:"picture"`
}

func (Organization) IsNode() {}

type RefreshTokenInput struct {
	Token string `json:"token"`
}

type Section struct {
	ID           string        `json:"id"`
	Name         string        `json:"name"`
	Organization *Organization `json:"organization"`
	Member       []*Member     `json:"member"`
}

func (Section) IsNode() {}

type User struct {
	ID        string  `json:"id"`
	Username  string  `json:"username"`
	Password  string  `json:"password"`
	Email     string  `json:"email"`
	Showname  *string `json:"showname"`
	Superuser bool    `json:"superuser"`
}

func (User) IsNode() {}

type Commitment string

const (
	CommitmentYes   Commitment = "YES"
	CommitmentMaybe Commitment = "MAYBE"
	CommitmentNo    Commitment = "NO"
)

var AllCommitment = []Commitment{
	CommitmentYes,
	CommitmentMaybe,
	CommitmentNo,
}

func (e Commitment) IsValid() bool {
	switch e {
	case CommitmentYes, CommitmentMaybe, CommitmentNo:
		return true
	}
	return false
}

func (e Commitment) String() string {
	return string(e)
}

func (e *Commitment) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Commitment(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Commitment", str)
	}
	return nil
}

func (e Commitment) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
